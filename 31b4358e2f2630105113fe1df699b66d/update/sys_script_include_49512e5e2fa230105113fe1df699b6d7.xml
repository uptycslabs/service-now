<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_297025_uptycs_co.UptycsCompliance</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>UptycsCompliance</name>
        <script><![CDATA[var CryptoJS = new Crypto().CryptoJS;
var UptycsCompliance = Class.create();
UptycsCompliance.prototype = {
    initialize: function(uptStandard, uptCustomerId, uptUrl, iss, secret) {
		this.standard = uptStandard;
        this.customerId = uptCustomerId;
		this.url = uptUrl;
		//this.auth = uptToken;
		this.iss = iss;
		this.secret = secret;
		this.missedSections = [];
	},

	// Helper function to remove illegal characters from the base64 string
    removeIllegalCharacters: function (input) {
        return input.replace(/=/g, '').replace(/\+/g, '-').replace(/\//g, '_');
    },

	// Helper function to convert an object to a base64 string
    base64object: function (input) {
		var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));
		var base64 = CryptoJS.enc.Base64.stringify(inputWords);
		var output = this.removeIllegalCharacters(base64);
		return output;
	},

	getToken: function(apiDate) {

		// Calculate the current date in seconds (UNIX timestamp)
		var date = Math.floor(apiDate.getTime() / 1000);

		// Create the header and payload objects
		var header = { 'alg': 'HS256', 'typ': 'JWT' };
		var payload = { 'iss': this.iss, 'iat': date, 'exp': date + 3600 }; // Token expires in 3600 seconds (1 hour)

		// Generate the unsigned token
		var unsignedToken = this.base64object(header) + "." + this.base64object(payload);
		
		// Calculate the signature hash using HMAC-SHA256
		var signatureHash = CryptoJS.HmacSHA256(unsignedToken, this.secret);

		// Convert the signature hash to base64
		var signature = signatureHash.toString(CryptoJS.enc.Base64);

		// Concatenate the unsigned token and signature to create the final token
		var token = this.removeIllegalCharacters(unsignedToken + '.' + signature);

		return 'Bearer ' + token;
    },
	
    wait: function(ms) {
        var start = Date.now(),
            current = start;
        while (current - start < ms) {
            current = Date.now();
        }
    },

    createPostMessage: function(postData) {
        var message = new sn_ws.RESTMessageV2('x_297025_uptycs_co.Uptycs Query', 'POST Query');

        //message.setStringParameterNoEscape('header_auth', this.auth);
        message.setStringParameterNoEscape('url', this.url);
        message.setStringParameterNoEscape('customer_id', this.customerId);
        now = new Date();
        message.setRequestHeader('date', now.toUTCString());
        message.setRequestHeader('content-type', 'application/json');
        //message.setRequestHeader('Authorization', this.auth);
		message.setRequestHeader('Authorization',this.getToken(now));
        message.setRequestBody(postData);
		gs.info(postData);

        return message;
    },

    createPostJobMessage: function(postData) {
        var message = new sn_ws.RESTMessageV2('x_297025_uptycs_co.Uptycs Query Job', 'POST Query Job');

        //message.setStringParameterNoEscape('header_auth', this.auth);
        message.setStringParameterNoEscape('url', this.url);
        message.setStringParameterNoEscape('customer_id', this.customerId);
        now = new Date();
        message.setRequestHeader('date', now.toUTCString());
        //message.setRequestHeader('Authorization', this.auth);
		message.setRequestHeader('Authorization',this.getToken(now));
        message.setRequestHeader('content-type', 'application/json');
        message.setRequestBody(postData);
		gs.info(postData);

        return message;
    },

    createJobInfoMessage: function(queryJobId) {
        var message = new sn_ws.RESTMessageV2('x_297025_uptycs_co.Uptycs Query Job', 'GET Query Job Info');

        //message.setStringParameterNoEscape('header_auth', this.auth);
        message.setStringParameterNoEscape('url', this.url);
        message.setStringParameterNoEscape('customer_id', this.customerId);
        message.setStringParameterNoEscape('job_id', queryJobId);
        //message.setStringParameterNoEscape('header_date', now.toUTCString());
        message.setRequestHeader('content-type', 'application/json');
        now = new Date();
        message.setRequestHeader('date', now.toUTCString());
        //message.setRequestHeader('Authorization', this.auth);
		message.setRequestHeader('Authorization',this.getToken(now));

        return message;
    },

    createJobResultsMessage: function(queryJobId, offset) {
        var message = new sn_ws.RESTMessageV2('x_297025_uptycs_co.Uptycs Query Job', 'GET Query Jobs Results'); 
        //message.setStringParameterNoEscape('header_auth', this.auth);
        message.setStringParameterNoEscape('url', this.url);
        message.setStringParameterNoEscape('customer_id', this.customerId);
        message.setStringParameterNoEscape('job_id', queryJobId);
        message.setStringParameterNoEscape('offset', offset);
        now = new Date();
        message.setRequestHeader('date', now.toUTCString());
        message.setRequestHeader('content-type', 'application/json');
        //message.setRequestHeader('Authorization', this.auth);
		message.setRequestHeader('Authorization',this.getToken(now));

        return message;
    },

    createSectionQuery: function(section) {
        return '"WITH distinct_results AS (SELECT DISTINCT CONCAT(section, \' \', title) AS section_title, authoritative_source, command, compliant, description, evidence, expected_value, metadata, path, rationale, reason, remediation, score, scored, section, version, upt_hostname, upt_asset_id, upt_hash, upt_time, upt_day FROM compliance WHERE standard = \'' + this.standard + '\' AND upt_day >= CAST(date_format(localtimestamp - INTERVAL \'7\' DAY, \'%Y%m%d\') AS INTEGER) AND title != \'\' AND section = \'' + section + '\'), latest AS (SELECT *, row_number() OVER (PARTITION BY upt_asset_id, section ORDER BY upt_time DESC) rank_num FROM distinct_results),final as ( SELECT * FROM latest WHERE rank_num = 1) select ua.gateway, CONCAT(ua.hardware_vendor, \' \', ua.hardware_model) as model, ua.live, ua.os_version, cla.* FROM final cla JOIN upt_assets ua ON cla.upt_asset_id = ua.id"';
    },

    getCount: function() {
        var postData = '{"query":"WITH latest AS (SELECT row_number() OVER (PARTITION BY upt_asset_id, section ORDER BY upt_time DESC) rank_num FROM compliance WHERE standard = \'' + this.standard + '\' AND upt_day >= CAST(date_format(localtimestamp - INTERVAL \'7\' DAY, \'%Y%m%d\') AS INTEGER) AND title != \'\') SELECT COUNT(*) as N FROM latest WHERE rank_num >= 1", "type":"global"}';

        var message = this.createPostMessage(postData);
        var response = message.execute();
        var responseObj = JSON.parse(response.getBody());
        var count = responseObj.items[0].N;
        return count;
    },

    getSections: function(sectionLikeClause) {
        var postData = '{"query":"SELECT section FROM compliance WHERE standard = \'' + this.standard + '\' AND upt_day >= CAST(date_format(localtimestamp - INTERVAL \'7\' DAY, \'%Y%m%d\') AS INTEGER) AND ' + sectionLikeClause + ' GROUP BY section"}';

		gs.info('sending uptycs query');
        var msg = this.createPostMessage(postData);
        var resp = msg.execute();
		var httpResponseStatus = resp.getStatusCode();
		gs.info("parsing response, status_code:  " + httpResponseStatus); 
        var respObj = JSON.parse(resp.getBody());

        var sections = [];
        for (i = 0; i < respObj.items.length; i++) {
            sections.push(respObj.items[i].section);
        }

        return sections;
    },

    submitQueryJob: function(query) {
        var postData = '{"query":' + query + ', "type":"global"}';
        var msg = this.createPostJobMessage(postData);

        var resp = msg.execute();
        var respObj = JSON.parse(resp.getBody());

        return respObj.id;
    },
	
    pollQueryJob: function(queryJobId, section) {
        var message = this.createJobInfoMessage(queryJobId);
        var status = 'QUEUED';
        do {
            response = message.execute();
			var httpResponseStatus = response.getStatusCode();
            responseObj = JSON.parse(response.getBody());
			gs.info('query job status code ' + queryJobId + ' ' + httpResponseStatus);
			//gs.info(response.getBody());
            status = responseObj.status;
			// Check if status is undefined and exit the loop
			if (!status || httpResponseStatus != 200) {
				gs.error('status is undefined. Exiting the loop.');
				break;
			}
			
			if (status != 'FINISHED' && status != 'ERROR' && status != 'QUEUED' && status != 'RUNNING') {
                gs.error('status is not FINISHED, ERROR, RUNNING, or QUEUED.  status is: ' + status);
				break;
            }
            comp.wait(5000);
        }
        while (status != 'FINISHED' && status != 'ERROR');

        if (status != 'FINISHED') {
            this.missedSections.push(section);
            gs.error('error: ' + responseObj.error.message.detail);
        }
        var nRows = responseObj.rowCount;
        gs.warn('section: ' + section + ', nRows: ' + nRows);
		
		return nRows;
	},
	
	pushToStaging: function(queryJobId, section) {
        var nRows = this.pollQueryJob(queryJobId, section);
        for (ii = 0; ii < nRows / 10000; ii++) { //loop over offset
            msg = this.createJobResultsMessage(queryJobId, ii * 10000);
            response = msg.execute();
            responseBody = response.getBody();
            httpStatus = response.getStatusCode();
            responseObj = JSON.parse(responseBody);

            //var nSkip = 0;
            for (iii = 0; iii < responseObj.items.length; iii++) { // loop over records

                var grCompliance = new GlideRecord('x_297025_uptycs_co_compliance');
                grCompliance.initialize();
                grCompliance.setValue('upt_asset_id', responseObj.items[iii].rowData.upt_asset_id);
                grCompliance.setValue('upt_day', responseObj.items[iii].rowData.upt_day);
                grCompliance.setValue('upt_hash', responseObj.items[iii].rowData.upt_hash);
                grCompliance.setValue('upt_hostname', responseObj.items[iii].rowData.upt_hostname);
                grCompliance.setValue('upt_time', responseObj.items[iii].rowData.upt_time);
                grCompliance.setValue('authoritative_source', responseObj.items[iii].rowData.authoritative_source);
                grCompliance.setValue('expected_value', responseObj.items[iii].rowData.expected_value);
                grCompliance.setValue('remediation', responseObj.items[iii].rowData.remediation);
                grCompliance.setValue('command', responseObj.items[iii].rowData.command);
                grCompliance.setValue('compliant', responseObj.items[iii].rowData.compliant);
                grCompliance.setValue('description', responseObj.items[iii].rowData.description);
                grCompliance.setValue('evidence', responseObj.items[iii].rowData.evidence);
                grCompliance.setValue('metadata', responseObj.items[iii].rowData.metadata);
                grCompliance.setValue('path', responseObj.items[iii].rowData.path);
                grCompliance.setValue('rationale', responseObj.items[iii].rowData.rationale);
                grCompliance.setValue('reason', responseObj.items[iii].rowData.reason);
                grCompliance.setValue('score', responseObj.items[iii].rowData.score);
                grCompliance.setValue('scored', responseObj.items[iii].rowData.scored);
                grCompliance.setValue('section_title', responseObj.items[iii].rowData.section_title);
                grCompliance.setValue('values', responseObj.items[iii].rowData.values);
                grCompliance.setValue('version', responseObj.items[iii].rowData.version);
                grCompliance.setValue('rank_num', responseObj.items[iii].rowData.rank_num);
                grCompliance.insert();

				
				gs.info('initializing cmdb record');
                /*var grConfigItem = new GlideRecord('cmdb_ci_hardware');
                grConfigItem.initialize();
                grConfigItem.addQuery('fqdn', responseObj.items[iii].rowData.upt_hostname);
                grConfigItem.addQuery('name', responseObj.items[iii].rowData.upt_hostname);
                grConfigItem.query();
                if(!grConfigItem.next()){
                    grConfigItem.setValue('fqdn', responseObj.items[iii].rowData.upt_hostname);
                    grConfigItem.setValue('name', responseObj.items[iii].rowData.upt_hostname);
                    grConfigItem.setValue('ip_address', responseObj.items[iii].rowData.gateway);
                    grConfigItem.setValue('model_number', responseObj.items[iii].rowData.model);
                    grConfigItem.setValue('environment', responseObj.items[iii].rowData.os_version);
                    grConfigItem.setValue('internet_facing', responseObj.items[iii].rowData.live);
                    grConfigItem.setValue('short_description', 'Uptycs Asset');
                    grConfigItem.insert();
					gs.info('inserted cmdb record');
                }*/
				var payload = {
					"items": [
						{
							"className": "cmdb_ci_hardware",
							"values": {
								"fqdn": responseObj.items[iii].rowData.upt_hostname,
								"name": responseObj.items[iii].rowData.upt_hostname,
								"short_description": "Uptycs Asset",
								"ip_address": responseObj.items[iii].rowData.gateway,
								"model_number": responseObj.items[iii].rowData.model,
								"environment" : responseObj.items[iii].rowData.os_version
								}
						}
					]
				};
				var input = JSON.stringify(payload);
				var output = sn_cmdb.IdentificationEngine.createOrUpdateCI('ServiceNow', input);
				var asset = JSON.parse(output);
				var assetRef = asset["items"][0]["sysId"];
				
                var grConfigComplianceTest = new GlideRecord('sn_vulc_test');
				gs.info('initializing sn_vulc_test record');
                grConfigComplianceTest.initialize();
                grConfigComplianceTest.addQuery('short_description', responseObj.items[iii].rowData.section_title);
                grConfigComplianceTest.addQuery('source_id', responseObj.items[iii].rowData.authoritative_source);
                grConfigComplianceTest.addQuery('source_category', responseObj.items[iii].rowData.section);
                grConfigComplianceTest.addQuery('source_sub_category', responseObj.items[iii].rowData.version);
                grConfigComplianceTest.query();
                if(!grConfigComplianceTest.next()){
                    grConfigComplianceTest.setValue('source', 'Uptycs');
                    grConfigComplianceTest.setValue('remediation', responseObj.items[iii].rowData.remediation);
                    grConfigComplianceTest.setValue('description', responseObj.items[iii].rowData.description);
                    grConfigComplianceTest.setValue('short_description', responseObj.items[iii].rowData.section_title);
                    grConfigComplianceTest.setValue('source_id', responseObj.items[iii].rowData.authoritative_source);
                    grConfigComplianceTest.setValue('source_category', responseObj.items[iii].rowData.section);
                    grConfigComplianceTest.setValue('source_sub_category', responseObj.items[iii].rowData.version);
                    grConfigComplianceTest.setValue('result', responseObj.items[iii].rowData.reason);
                    grConfigComplianceTest.setValue('risk_score', responseObj.items[iii].rowData.score);
                    grConfigComplianceTest.insert();
					gs.info('inserted sn_vulc_test record');
                }
				var sysIdTest = grConfigComplianceTest.sys_id.toString();
				
                var grConfigCompliancePolicy = new GlideRecord('sn_vulc_policy');
				gs.info('initializing sn_vulc_policy record');
                grConfigCompliancePolicy.initialize();
                grConfigCompliancePolicy.addQuery('source_id', responseObj.items[iii].rowData.authoritative_source);
                grConfigCompliancePolicy.query();
                if(!grConfigCompliancePolicy.next()){
                    grConfigCompliancePolicy.setValue('short_description', responseObj.items[iii].rowData.authoritative_source);
                    grConfigCompliancePolicy.setValue('source', 'Uptycs');
                    grConfigCompliancePolicy.setValue('description', 'Uptycs compliance standard');
                    grConfigCompliancePolicy.setValue('source_id', responseObj.items[iii].rowData.authoritative_source);
                    grConfigCompliancePolicy.setValue('active', true);
                    grConfigCompliancePolicy.insert();
					gs.info('inserted sn_vulc_policy record');
                }
				var sysIdPolicy = grConfigCompliancePolicy.sys_id.toString();
				
                var grConfigCompliancePolicyTest = new GlideRecord('sn_vulc_policy_test');
				gs.info('initializing sn_vulc_policy_test record');
                grConfigCompliancePolicyTest.initialize();
                grConfigCompliancePolicyTest.addQuery('section_name', responseObj.items[iii].rowData.authoritative_source);
                grConfigCompliancePolicyTest.query();
                if(!grConfigCompliancePolicyTest.next()){
                    grConfigCompliancePolicyTest.setValue('name', responseObj.items[iii].rowData.authoritative_source);
                    grConfigCompliancePolicyTest.setValue('section_name', responseObj.items[iii].rowData.authoritative_source);
                    grConfigCompliancePolicyTest.setValue('policy', sysIdPolicy);
                    grConfigCompliancePolicyTest.setValue('control', grConfigComplianceTest.getUniqueValue());
                    grConfigCompliancePolicyTest.insert();
					gs.info('inserted sn_vulc_policy_test record');
                }

                var grConfigCompliance = new GlideRecord('sn_vulc_result');
				gs.info('initializing sn_vulc_result record');
                grConfigCompliance.initialize();
				var desc = responseObj.items[iii].rowData.section_title + ' ' + responseObj.items[iii].rowData.description;
                grConfigCompliance.setValue('cmdb_ci', assetRef); //reference
                grConfigCompliance.setValue('control', sysIdTest); //reference
                grConfigCompliance.setValue('last_seen', responseObj.items[iii].rowData.upt_time);
                grConfigCompliance.setValue('source', 'Uptycs');
                grConfigCompliance.setValue('source_id', responseObj.items[iii].rowData.authoritative_source);
                grConfigCompliance.setValue('expected_values', responseObj.items[iii].rowData.expected_value);
                grConfigCompliance.setValue('remediation', responseObj.items[iii].rowData.remediation);
                grConfigCompliance.setValue('result', responseObj.items[iii].rowData.compliant);
                grConfigCompliance.setValue('description', desc);
                grConfigCompliance.setValue('display', responseObj.items[iii].rowData.description);
                grConfigCompliance.setValue('actual_values', responseObj.items[iii].rowData.evidence);
                grConfigCompliance.setValue('risk_score', responseObj.items[iii].rowData.score);
                grConfigCompliance.insert();
				gs.info('inserted sn_vulc_result record');
            } // records
        } // offset
	},
	
	getMissedSections: function() {
        return this.missedSections;
	},

    runCompliance: function(sections) {
		this.missedSections = [];
        var qjIds = [];
        for (i = 0; i < 20; i++) { //post first 20 query jobs
            if (i < sections.length) {
                qjIds[i] = this.submitQueryJob(this.createSectionQuery(sections[i]));
            }
        }

        for (i = 0; i < sections.length; i++) { // loop over number of query jobs
            if ((i + 10) % 20 == 0 && (i + 10) < sections.length) {
                for (ii = 0; ii < 20; ii++) { //post next batch of query jobs
                    if ((i + 10) + ii < sections.length) {
                        qjIds[(i + 10) + ii] = this.submitQueryJob(this.createSectionQuery(sections[(i + 10) + ii]));
                    }
                }
            }
			this.pushToStaging(qjIds[i], sections[i]);
        } //query jobs
    },
	
    type: 'UptycsCompliance'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-09-14 17:40:57</sys_created_on>
        <sys_id>49512e5e2fa230105113fe1df699b6d7</sys_id>
        <sys_mod_count>65</sys_mod_count>
        <sys_name>UptycsCompliance</sys_name>
        <sys_package display_value="Uptycs" source="x_297025_uptycs_co">31b4358e2f2630105113fe1df699b66d</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Uptycs">31b4358e2f2630105113fe1df699b66d</sys_scope>
        <sys_update_name>sys_script_include_49512e5e2fa230105113fe1df699b6d7</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-09-05 14:20:23</sys_updated_on>
    </sys_script_include>
</record_update>
